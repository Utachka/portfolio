-- Database: book_db

-- DROP DATABASE IF EXISTS book_db;

CREATE DATABASE book_db
    WITH
    OWNER = postgres
    ENCODING = 'UTF8'
    LC_COLLATE = 'Russian_Russia.1251'
    LC_CTYPE = 'Russian_Russia.1251'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1
    IS_TEMPLATE = False;


	CREATE TABLE IF NOT EXISTS book_db.public.aircraft
(
    id_air bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    name character varying(50) NOT NULL,
	count_sits integer not null,
    PRIMARY KEY (id_air)
);

-- остальные таблицы
	CREATE TABLE IF NOT EXISTS book_db.public.country
(
    id_country bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    name character varying(50) NOT NULL,
    PRIMARY KEY (id_country)
);


	CREATE TABLE IF NOT EXISTS book_db.public.flight
(
    id_flight bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    country_source_id bigint not null,
	country_target_id bigint not null,
	id_air bigint not null,
	departure_time timestamp not null,
	arrival_time timestamp not null,
    PRIMARY KEY (id_flight)
);

CREATE TABLE IF NOT EXISTS book_db.public.tickets
(
    id_ticket bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
	id_flight bigint not null,
	seat_number int not null,
	username character varying(150),
    PRIMARY KEY (id_ticket)
);



-- Заполняем тестовыми записями таблицы
INSERT INTO book_db.public.aircraft (name, count_sits) VALUES ('FG_1', 10);
INSERT INTO book_db.public.aircraft (name, count_sits) VALUES ('FG_2', 120);
INSERT INTO book_db.public.aircraft (name, count_sits) VALUES ('FG_3', 130);

INSERT INTO book_db.public.country (name) VALUES ('Russia');
INSERT INTO book_db.public.country (name) VALUES ('Turkey');
INSERT INTO book_db.public.country (name) VALUES ('Indonesia');
INSERT INTO book_db.public.country (name) VALUES ('France');
INSERT INTO book_db.public.country (name) VALUES ('German');

INSERT INTO book_db.public.flight (country_source_id, country_target_id, id_air, departure_time, arrival_time) VALUES (1, 2, 1, '2021-01-01 12:30:00', '2021-01-01 19:16:00');
INSERT INTO book_db.public.flight (country_source_id, country_target_id, id_air, departure_time, arrival_time) VALUES (2, 1, 2, '2021-01-10 10:00:00', '2021-01-10 17:50:00');
INSERT INTO book_db.public.flight (country_source_id, country_target_id, id_air, departure_time, arrival_time) VALUES (3, 4, 3, '2021-02-01 09:30:00', '2021-02-01 13:00:00');

INSERT INTO book_db.public.tickets (id_flight, seat_number, username) VALUES (1, 1, null);
INSERT INTO book_db.public.tickets (id_flight, seat_number, username) VALUES (1, 2, null);
INSERT INTO book_db.public.tickets (id_flight, seat_number, username) VALUES (1, 3, null);
INSERT INTO book_db.public.tickets (id_flight, seat_number, username) VALUES (1, 4, null);
INSERT INTO book_db.public.tickets (id_flight, seat_number, username) VALUES (1, 5, null);
INSERT INTO book_db.public.tickets (id_flight, seat_number, username) VALUES (1, 6, null);
INSERT INTO book_db.public.tickets (id_flight, seat_number, username) VALUES (1, 7, null);
INSERT INTO book_db.public.tickets (id_flight, seat_number, username) VALUES (1, 8, null);
INSERT INTO book_db.public.tickets (id_flight, seat_number, username) VALUES (1, 9, null);
INSERT INTO book_db.public.tickets (id_flight, seat_number, username) VALUES (1, 10, null);


-- назначаем права
GRANT ALL PRIVILEGES ON DATABASE book_db TO "пользователь БД";

-- дополнительно назначаем права на таблицы
GRANT ALL PRIVILEGES ON aircraft TO "пользователь БД";
GRANT ALL PRIVILEGES ON country TO "пользователь БД";
GRANT ALL PRIVILEGES ON flight TO "пользователь БД";
GRANT ALL PRIVILEGES ON tickets TO "пользователь БД";


-- select * from auth_user
-- витрина для отображения списка рейсов

CREATE OR REPLACE VIEW v_flight_list AS
select
t1.id_flight as number_flight
-- ,t1.country_source_id
,t3.name as country_source
-- ,t1.country_target_id
,t4.name as country_target
-- ,t1.id_air
,t2.name as air_name
,t2.count_sits as count_sits
,t5.count_free_tickets
,t1.departure_time
,t1.arrival_time
from flight as t1
left join aircraft as t2
	on t1.id_air = t2.id_air
left join country as t3
	on t1.country_source_id = t3.id_country
left join country as t4
	on t1.country_target_id = t4.id_country
left join
	(
		select id_flight, count(id_ticket) as count_free_tickets from tickets where username is null group by 1
	) t5
	on t1.id_flight = t5.id_flight
where count_free_tickets is not null; -- условие по которому ограничиваемся всеми рейсами, на которые уже сформированы билеты


-- права выдаем
GRANT ALL PRIVILEGES ON v_flight_list TO "пользователь БД";


--создаем представление для вывода данных в личный кабинет
CREATE OR REPLACE VIEW v_user_lock_tickets AS
select
t1.username
,t1.id_flight
,t1.id_ticket
,t1.seat_number
,t2.departure_time
,t2.arrival_time
,t3.name as country_source
,t4.name as country_target
from tickets t1
left join flight t2
	on t1.id_flight = t2.id_flight
left join country t3
	on t2.country_source_id = t3.id_country
left join country t4
	on t2.country_target_id = t4.id_country
where t1.username is not null;


-- выдаем права
GRANT ALL PRIVILEGES ON v_user_lock_tickets TO "пользователь БД";
