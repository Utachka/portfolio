Документ: Архитектура системы бронирования авиабилетов
Верся документа 1
Автор: utachka

Содержание:
    1. Введение
    2. Обзор микросервисной архитектуры
    3. Взаимодействие между микросервисами, диаграмма компонентов
    4. Обзор базы данных, er диаграмма
    5. Описание интерфейсов


Введение:
    Описание: Документ содержит описание архитектуры системы бронирования авиабилетов, основанной на микросервисной архитектуре.
    Цель: Целью данного документа является предоставление детального обзора компонентов, связей и взаимодействия между ними в системе.

Общая архитектура:
    Описание: В этом разделе представлена общая архитектура системы, определяющая основные компоненты и их взаимосвязи.
    Структура:
        Клиентский интерфейс (frontend):
            1. Назначение: Отвечает за отображение HTML-файлов пользователю и является единой точкой доступа к системе.
            2. Структура сервиса:
                - html файлы, которые передаются пользователю на запросы
                - urls.py - описание маршрутов сервиса и добавление функций, которые обрабатывают поступивший запрос
                - views.py - реализация функций, которые обрабатывают запросы поступившие от пользователя и обрабатывающие ответы с сервера

        Микросервис авторизации (authenticate): обеспечивает функционал авторизации и регистрации пользователей.
            1. Назначение: Отвечает за логику обработки запросов на регистрацию и авторизацию пользователей
            2. Структура сервиса:
                - forms.py: формы для регистрации и авторизации пользователей
                - urls.py: описание маршрутов сервиса и добавление функций, которые обрабатывают поступивший запрос
                - views.py: реализация функций:
                    - Регистрация новых пользователей
                    - Авторизация в системе
                    - Выход из учетной записи
                    - Создание новых пользователей в базе данных
                    - Отправка запроса на сервис бронирования для добавления квот новым пользователям на бронирование

        Микросервис маршрутизации запросов (gateway): перенаправляет запросы от клиента к соответствующим микросервисам системы.
            1. Назначение: Реализация доступа и единой точки входа к внутренним API микросервисов системы для сервиса frontend
            2. Структура сервиса:
                - urls.py: описание всех реализованных маршрутов для сервиса frontend и добавление функций, которые обрабатывают поступившие запросы
                - views.py: реализация функций, в которых направляются запросы на API микросервисов и возвращают ответы на сервис frontend

        Микросервис данных о рейсах (airs): хранит информацию о рейсах, билетах и странах, предоставляет API для управления данными.
            1. Назначение: Получение, обработка и хранение информации о рейсах, билетах и странах, а так же реализация API для управления этими сущностями
            2. Структура сервиса:
                - models.py: Описание моделей сущностей, которые привязаны к базе данных
                - routers.py: Описание маршрутизации запросов к базе данных, так как сервис имеет свою базу данных
                - serializers.py: Обработка моделей для сериализации их в нужный формат перед отправкой ответа
                - urls.py: описание всех реализованных маршрутов для доступа к rest API
                - views.py: реализация API запросов

        Сервис бронирования (booking_tickets): отвечает за бронирование билетов.
            1. Назначение: Реализация логики бронирования и отмены бронирования билетов, а так же управления квотами на бронь
            2. Структура сервиса:
                - models.py: Описание моделей сущностей, которые привязаны к базе данных
                - routers.py: Описание маршрутизации запросов к базе данных, так как сервис имеет свою базу данных
                - serializers.py: Обработка моделей для сериализации их в нужный формат перед отправкой ответа
                - urls.py: описание всех реализованных маршрутов для доступа к rest API
                - views.py: реализация API запросов

Взаимодействие между микросервисами:
    Взаимодействие между микросервисами визуализированы на диаграмме компонентов, которая находится в папке Диаграммы/components.drawio


Обзор базы данных, er диаграмма:
    База данных отображена в er-диаграмме логического уровня, которая находится в папке Диаграммы/er_diagram..drawio


Интерфейсы:
    REST API: (для визулизации интерфейса rest API код из файлов нужно вставить в swagger(https://editor.swagger.io/))
        Микросервис gateway: Диаграммы/REST API/gateway.yaml
        Микросервис airs: Диаграммы/REST API/airs.yaml
        Микросервис booking_tickets: Диаграммы/REST API/booking_tickets.yaml


    Пользовательский интерфейс:
        Главная страница:
            1. Адрес: http://127.0.0.1:8000/
            2. Вид: Диаграммы/Пользовательские интерфейсы/home_auth.jpg
        Страница авторизации:
            1. Адрес: http://127.0.0.1:8000/auth/login/
            2. Вид: Диаграммы/Пользовательские интерфейсы/login.jpg
        Страница регистрации
            1. Адрес: http://127.0.0.1:8000/auth/register/
            2. Вид: Диаграммы/Пользовательские интерфейсы/register.jpg
        Страница детализации рейса:
            1. Адрес: http://127.0.0.1:8000/flight_detail/1/
            2. Вид: Диаграммы/Пользовательские интерфейсы/flight_detail.jpg
        Страница личный кабинет пользователя:
            1. Адрес: http://127.0.0.1:8000/user_page/1/
            2. Вид: Диаграммы/Пользовательские интерфейсы/user_page.jpg


